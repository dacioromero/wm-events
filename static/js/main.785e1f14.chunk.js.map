{"version":3,"sources":["Log.tsx","Pointer.tsx","App.tsx","index.tsx"],"names":["initialFilter","monetizationpending","monetizationstart","monetizationprogress","monetizationstop","Log","useState","log","setLog","filter","setFilter","handleFilterChange","useCallback","event","target","name","checked","handleMonetization","type","JSON","stringify","detail","useListener","onPending","onStart","onProgress","onStop","filterSet","Set","Object","entries","map","value","onChange","has","tipbot","stronghold","Pointer","pointer","setPointer","handleChange","Helmet","content","App","ReactDOM","render","document","getElementById"],"mappings":"sbAGA,IAAMA,EAAgB,CACpBC,qBAAqB,EACrBC,mBAAmB,EACnBC,sBAAsB,EACtBC,kBAAkB,GAmDLC,EAhDC,WAAO,IAAD,EACEC,mBAA6B,IAD/B,mBACbC,EADa,KACRC,EADQ,OAEQF,mBAASN,GAFjB,mBAEbS,EAFa,KAELC,EAFK,KAIdC,EAAqBC,uBAAY,SAACC,GAA0C,IAAD,EACrDA,EAAMC,OAAxBC,EADuE,EACvEA,KAAMC,EADiE,EACjEA,QAEdN,GAAU,SAAAD,GAAM,O,yWAAA,IACXA,EADW,eAEbM,EAAOC,SAET,IAGH,SAASC,EAAoBJ,GAC3BL,GAAO,SAAAD,GAAG,OACR,CAACM,EAAMK,KAAMC,KAAKC,UAAUP,EAAMQ,OAAQ,KAAM,KADxC,mBAELd,OAIPe,sBAAY,CACVC,UAAWN,EACXO,QAASP,EACTQ,WAAYR,EACZS,OAAQT,IAGV,IAAMU,EAAY,IAAIC,IAAIC,OAAOC,QAAQrB,GAAQA,QAAO,0CAAsBsB,KAAI,2CAElF,OACE,oCACGF,OAAOC,QAAQrB,GAAQsB,KAAI,mCAAEhB,EAAF,KAAQiB,EAAR,YAC1B,+BACE,2BAAOC,SAAUtB,EAAoBO,KAAK,WAAWF,QAASgB,EAAOjB,KAAMA,IAC1EA,MAGJR,EAAIE,QAAO,gBAAEM,EAAF,2BAAYY,EAAUO,IAAInB,MAAOgB,KAAI,mCAAEhB,EAAF,KAAQM,EAAR,YAC/C,oCACE,4BAAKN,GACL,6BAAMM,S,OChDVc,EAAS,6CACTC,EAAa,yDA2BJC,EAzBK,WAAO,IAAD,EACM/B,mBAAS6B,GADf,mBACjBG,EADiB,KACRC,EADQ,KAElBC,EAAe5B,uBAAY,SAACC,GAAD,OAA0C0B,EAAW1B,EAAMC,OAAOkB,SAAQ,IAE3G,OACE,oCACE,kBAACS,EAAA,OAAD,KACE,0BACE1B,KAAK,eACL2B,QAASJ,KAGb,+BACE,2BAAOpB,KAAK,QAAQH,KAAK,UAAUiB,MAAOG,EAAQF,SAAUO,EAAcxB,QAASsB,IAAYH,IADjG,cAIA,+BACE,2BAAOjB,KAAK,QAAQH,KAAK,UAAUiB,MAAOI,EAAYH,SAAUO,EAAcxB,QAASsB,IAAYF,IADrG,cAIA,6BAAME,KCXGK,EAVC,WACd,OACE,oCACE,uDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.785e1f14.chunk.js","sourcesContent":["import React, { FC, useState, useCallback, ChangeEvent } from \"react\";\nimport { useListener } from 'react-hook-wm'\n\nconst initialFilter = {\n  monetizationpending: true,\n  monetizationstart: true ,\n  monetizationprogress: false,\n  monetizationstop: true\n}\n\nconst Log: FC = () => {\n  const [log, setLog] = useState<[string, string][]>([])\n  const [filter, setFilter] = useState(initialFilter)\n\n  const handleFilterChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = event.target\n\n    setFilter(filter => ({\n      ...filter,\n      [name]: checked\n    }))\n  }, [])\n\n\n  function handleMonetization (event: any) {\n    setLog(log => [\n      [event.type, JSON.stringify(event.detail, null, 2)],\n      ...log\n    ])\n  }\n\n  useListener({\n    onPending: handleMonetization,\n    onStart: handleMonetization,\n    onProgress: handleMonetization,\n    onStop: handleMonetization\n  })\n\n  const filterSet = new Set(Object.entries(filter).filter(([, value]) => value).map(([name]) => name))\n\n  return (\n    <>\n      {Object.entries(filter).map(([name, value]) => (\n        <label>\n          <input onChange={handleFilterChange} type='checkbox' checked={value} name={name} />\n          {name}\n        </label>\n      ))}\n      {log.filter(([name]) => filterSet.has(name)).map(([name, detail]) => (\n        <>\n          <h3>{name}</h3>\n          <pre>{detail}</pre>\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default Log\n","import React, { FC, useState, useCallback, ChangeEvent } from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst tipbot = '$coil.xrptipbot.com/7UT9ayR4TgK5U4sqcd3y_g'\nconst stronghold = '$pay.stronghold.co/1a1263c3795a7d24987bf8ff352503fdab9'\n\nconst Pointer: FC = () => {\n  const [pointer, setPointer] = useState(tipbot)\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => setPointer(event.target.value), [])\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name='monetization'\n          content={pointer}\n        />\n      </Helmet>\n      <label>\n        <input type='radio' name='pointer' value={tipbot} onChange={handleChange} checked={pointer === tipbot} />\n        XRP TipBot\n      </label>\n      <label>\n        <input type='radio' name='pointer' value={stronghold} onChange={handleChange} checked={pointer === stronghold} />\n        Stronghold\n      </label>\n      <pre>{pointer}</pre>\n    </>\n  )\n}\n\nexport default Pointer\n","import React, { FC } from 'react';\n\nimport Log from './Log';\nimport Pointer from './Pointer';\n\nconst App: FC = () => {\n  return (\n    <>\n      <h1>Web Monetization Events</h1>\n      <Pointer />\n      <Log />\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}