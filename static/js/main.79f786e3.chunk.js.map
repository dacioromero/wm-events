{"version":3,"sources":["Log/Events.tsx","Log/Log.tsx","Pointer.tsx","App.tsx","index.tsx"],"names":["eventsReducer","prevEvents","event","Events","filters","events","useReducedListener","filter","type","map","key","timeStamp","JSON","stringify","detail","initialFilters","monetizationpending","monetizationstart","monetizationprogress","monetizationstop","Log","useState","setFilters","handleFilterChange","target","value","checked","Object","entries","onChange","name","tipbot","stronghold","Pointer","pointer","setPointer","handleChange","Helmet","content","App","ReactDOM","render","document","getElementById"],"mappings":"wMAUMA,EAAsD,SAACC,EAAYC,GACvE,MAAM,CAAEA,GAAR,mBAAkBD,KAkBLE,EAfkB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAC5BC,EAASC,6BAAmBN,EAAe,IAEjD,OACE,gDACGK,EAAOE,QAAO,SAACL,GAAD,OAAWE,EAAQF,EAAMM,SAAOC,KAAI,SAACP,GAAD,OACjD,wBAAC,WAAD,CAAUQ,IAAG,UAAKR,EAAMM,KAAX,YAAmBN,EAAMS,YACpC,kCAAKT,EAAMM,KAAX,IAAkBN,EAAMS,WACxB,mCAAMC,KAAKC,UAAUX,EAAMY,OAAQ,KAAM,UCjB7CC,EAA0B,CAC9BC,qBAAqB,EACrBC,mBAAmB,EACnBC,sBAAsB,EACtBC,kBAAkB,GAkCLC,EA/BC,WAAO,IAAD,EACUC,mBAASN,GADnB,mBACbX,EADa,KACJkB,EADI,KAGpB,SAASC,EAAmBrB,GAAuC,IAAD,EACrCA,EAAMsB,OAAzBC,EADwD,EACxDA,MAAOC,EADiD,EACjDA,QAEfJ,GAAW,SAAAf,GAAM,sBACZA,EADY,eAEdkB,EAAQC,OAIb,OACE,gDACGC,OAAOC,QAAQxB,GAASK,KAAI,mCAAEgB,EAAF,KAASC,EAAT,YAC3B,iCAAOhB,IAAKe,GACV,iCACEI,SAAUN,EACVG,QAASA,EACTD,MAAOA,EACPK,KAAK,UACLtB,KAAK,aAENiB,MAGL,wBAAC,EAAD,CAAQrB,QAASA,M,QClCjB2B,EAAS,6CACTC,EAAa,yDA0CJC,EAxCK,WAAO,IAAD,EACMZ,mBAASU,GADf,mBACjBG,EADiB,KACRC,EADQ,KAGxB,SAASC,EAAclC,GACrBiC,EAAWjC,EAAMsB,OAAOC,OAG1B,OACE,gDACE,wBAACY,EAAA,EAAD,KACE,gCACEP,KAAK,eACLQ,QAASJ,KAGb,qCACE,iCACE1B,KAAK,QACLsB,KAAK,UACLL,MAAOM,EACPF,SAAUO,EACVV,QAASQ,IAAYH,IANzB,cAUA,qCACE,iCACEvB,KAAK,QACLsB,KAAK,UACLL,MAAOO,EACPH,SAAUO,EACVV,QAASQ,IAAYF,IANzB,cAUA,mCAAME,KC3BGK,EAVC,WACd,OACE,gDACE,6DACA,wBAAC,EAAD,MACA,wBAAC,EAAD,QCLNC,UAASC,OAAO,wBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.79f786e3.chunk.js","sourcesContent":["import React, { FC, Fragment } from 'react'\nimport { MonetizationEvent } from 'types-wm'\nimport { ListenerReducer, useReducedListener } from 'react-hook-wm'\n\nimport { Filters } from './shared'\n\ninterface EntriesProps {\n  filters: Filters\n}\n\nconst eventsReducer: ListenerReducer<MonetizationEvent[]> = (prevEvents, event) => {\n  return [event, ...prevEvents]\n}\n\nconst Events: FC<EntriesProps> = ({ filters }) => {\n  const events = useReducedListener(eventsReducer, [])\n\n  return (\n    <>\n      {events.filter((event) => filters[event.type]).map((event) => (\n        <Fragment key={`${event.type}:${event.timeStamp}`}>\n          <h3>{event.type}:{event.timeStamp}</h3>\n          <pre>{JSON.stringify(event.detail, null, 2)}</pre>\n        </Fragment>\n      ))}\n    </>\n  )\n}\n\nexport default Events\n","import React, { FC, useState, ChangeEvent } from 'react'\n\nimport { Filters } from './shared'\nimport Events from './Events'\n\nconst initialFilters: Filters = {\n  monetizationpending: true,\n  monetizationstart: true ,\n  monetizationprogress: false,\n  monetizationstop: true\n}\n\nconst Log: FC = () => {\n  const [filters, setFilters] = useState(initialFilters)\n\n  function handleFilterChange(event: ChangeEvent<HTMLInputElement>) {\n    const { value, checked } = event.target\n\n    setFilters(filter => ({\n      ...filter,\n      [value]: checked\n    }))\n  }\n\n  return (\n    <>\n      {Object.entries(filters).map(([value, checked]) => (\n        <label key={value}>\n          <input\n            onChange={handleFilterChange}\n            checked={checked}\n            value={value}\n            name='filters'\n            type='checkbox'\n          />\n          {value}\n        </label>\n      ))}\n      <Events filters={filters} />\n    </>\n  )\n}\n\nexport default Log\n","import React, { useState, FC, ChangeEvent } from 'react'\n// @ts-ignore\nimport { Helmet } from 'react-helmet/es/Helmet'\n\nconst tipbot = '$coil.xrptipbot.com/7UT9ayR4TgK5U4sqcd3y_g'\nconst stronghold = '$pay.stronghold.co/1a1263c3795a7d24987bf8ff352503fdab9'\n\nconst Pointer: FC = () => {\n  const [pointer, setPointer] = useState(tipbot)\n\n  function handleChange (event: ChangeEvent<HTMLInputElement>): void {\n    setPointer(event.target.value)\n  }\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name='monetization'\n          content={pointer}\n        />\n      </Helmet>\n      <label>\n        <input\n          type='radio'\n          name='pointer'\n          value={tipbot}\n          onChange={handleChange}\n          checked={pointer === tipbot}\n        />\n        XRP TipBot\n      </label>\n      <label>\n        <input\n          type='radio'\n          name='pointer'\n          value={stronghold}\n          onChange={handleChange}\n          checked={pointer === stronghold}\n        />\n        Stronghold\n      </label>\n      <pre>{pointer}</pre>\n    </>\n  )\n}\n\nexport default Pointer\n","import React, { FC } from 'react'\n\nimport Log from './Log'\nimport Pointer from './Pointer'\n\nconst App: FC = () => {\n  return (\n    <>\n      <h1>Web Monetization Events</h1>\n      <Pointer />\n      <Log />\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}