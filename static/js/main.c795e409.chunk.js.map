{"version":3,"sources":["Log/Entries.tsx","Log/Log.tsx","Pointer.tsx","App.tsx","index.tsx"],"names":["Entries","filters","useState","log","setLog","handleMonetization","event","useListener","onPending","onStart","onProgress","onStop","filter","type","map","detail","JSON","stringify","initialFilters","monetizationpending","monetizationstart","monetizationprogress","monetizationstop","Log","setFilters","handleFilterChange","useCallback","target","name","checked","Object","entries","key","onChange","tipbot","stronghold","Pointer","pointer","setPointer","handleChange","value","Helmet","content","App","ReactDOM","render","document","getElementById"],"mappings":"gOAsCeA,EA1BmB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAC3BC,mBAA8B,IADH,mBAC1CC,EAD0C,KACrCC,EADqC,KAGjD,SAASC,EAAoBC,GAC3BF,GAAO,SAAAD,GAAG,OAAKG,GAAL,mBAAeH,OAU3B,OAPAI,sBAAY,CACVC,UAAWH,EACXI,QAASJ,EACTK,WAAYL,EACZM,OAAQN,IAIR,oCACGF,EAAIS,QAAO,gBAAGC,EAAH,EAAGA,KAAH,OAAcZ,EAAQY,MAAOC,KAAI,gBAAGD,EAAH,EAAGA,KAAME,EAAT,EAASA,OAAT,OAC3C,oCACE,4BAAKF,GACL,6BAAMG,KAAKC,UAAUF,EAAQ,KAAM,UC1BvCG,EAA0B,CAC9BC,qBAAqB,EACrBC,mBAAmB,EACnBC,sBAAsB,EACtBC,kBAAkB,GAiCLC,EA9BC,WAAO,IAAD,EACUrB,mBAASgB,GADnB,mBACbjB,EADa,KACJuB,EADI,KAGdC,EAAqBC,uBAAY,SAACpB,GAA0C,IAAD,EACrDA,EAAMqB,OAAxBC,EADuE,EACvEA,KAAMC,EADiE,EACjEA,QAEdL,GAAW,SAAAZ,GAAM,sBACZA,EADY,eAEdgB,EAAOC,SAET,IAEH,OACE,oCACGC,OAAOC,QAAQ9B,GAASa,KAAI,mCAAED,EAAF,KAAQgB,EAAR,YAC3B,2BAAOG,IAAKnB,GACV,2BACEoB,SAAUR,EACVI,QAASA,EACTD,KAAMf,EACNA,KAAK,aAENA,MAGL,kBAAC,EAAD,CAASZ,QAASA,M,OClClBiC,EAAS,6CACTC,EAAa,yDAuCJC,EArCK,WAAO,IAAD,EACMlC,mBAASgC,GADf,mBACjBG,EADiB,KACRC,EADQ,KAElBC,EAAeb,uBAAY,SAACpB,GAAD,OAA0CgC,EAAWhC,EAAMqB,OAAOa,SAAQ,IAE3G,OACE,oCACE,kBAACC,EAAA,OAAD,KACE,0BACEb,KAAK,eACLc,QAASL,KAGb,+BACE,2BACExB,KAAK,QACLe,KAAK,UACLY,MAAON,EACPD,SAAUM,EACVV,QAASQ,IAAYH,IANzB,cAUA,+BACE,2BACErB,KAAK,QACLe,KAAK,UACLY,MAAOL,EACPF,SAAUM,EACVV,QAASQ,IAAYF,IANzB,cAUA,6BAAME,KCvBGM,EAVC,WACd,OACE,oCACE,uDACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.c795e409.chunk.js","sourcesContent":["import React, { FC, useState } from 'react'\nimport { MonetizationEventMap } from 'types-wm'\nimport { useListener } from 'react-hook-wm'\n\nimport { Filters } from './shared'\n\ntype MonetizationEvent = MonetizationEventMap[keyof MonetizationEventMap]\n\ninterface EntriesProps {\n  filters: Filters\n}\n\nconst Entries: FC<EntriesProps> = ({ filters }) => {\n  const [log, setLog] = useState<MonetizationEvent[]>([])\n\n  function handleMonetization (event: MonetizationEvent) {\n    setLog(log => [event, ...log])\n  }\n\n  useListener({\n    onPending: handleMonetization,\n    onStart: handleMonetization,\n    onProgress: handleMonetization,\n    onStop: handleMonetization\n  })\n\n  return (\n    <>\n      {log.filter(({ type }) => filters[type]).map(({ type, detail }) => (\n        <>\n          <h3>{type}</h3>\n          <pre>{JSON.stringify(detail, null, 2)}</pre>\n        </>\n      ))}\n    </>\n  )\n}\n\nexport default Entries\n","import React, { FC, useState, useCallback, ChangeEvent } from \"react\";\n\nimport { Filters } from \"./shared\";\nimport Entries from \"./Entries\";\n\nconst initialFilters: Filters = {\n  monetizationpending: true,\n  monetizationstart: true ,\n  monetizationprogress: false,\n  monetizationstop: true\n}\n\nconst Log: FC = () => {\n  const [filters, setFilters] = useState(initialFilters)\n\n  const handleFilterChange = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const { name, checked } = event.target\n\n    setFilters(filter => ({\n      ...filter,\n      [name]: checked\n    }))\n  }, [])\n\n  return (\n    <>\n      {Object.entries(filters).map(([type, checked]) => (\n        <label key={type}>\n          <input\n            onChange={handleFilterChange}\n            checked={checked}\n            name={type}\n            type='checkbox'\n          />\n          {type}\n        </label>\n      ))}\n      <Entries filters={filters} />\n    </>\n  )\n}\n\nexport default Log\n","import React, { FC, useState, useCallback, ChangeEvent } from 'react'\nimport { Helmet } from 'react-helmet'\n\nconst tipbot = '$coil.xrptipbot.com/7UT9ayR4TgK5U4sqcd3y_g'\nconst stronghold = '$pay.stronghold.co/1a1263c3795a7d24987bf8ff352503fdab9'\n\nconst Pointer: FC = () => {\n  const [pointer, setPointer] = useState(tipbot)\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement>) => setPointer(event.target.value), [])\n\n  return (\n    <>\n      <Helmet>\n        <meta\n          name='monetization'\n          content={pointer}\n        />\n      </Helmet>\n      <label>\n        <input\n          type='radio'\n          name='pointer'\n          value={tipbot}\n          onChange={handleChange}\n          checked={pointer === tipbot}\n        />\n        XRP TipBot\n      </label>\n      <label>\n        <input\n          type='radio'\n          name='pointer'\n          value={stronghold}\n          onChange={handleChange}\n          checked={pointer === stronghold}\n        />\n        Stronghold\n      </label>\n      <pre>{pointer}</pre>\n    </>\n  )\n}\n\nexport default Pointer\n","import React, { FC } from 'react';\n\nimport Log from './Log';\nimport Pointer from './Pointer';\n\nconst App: FC = () => {\n  return (\n    <>\n      <h1>Web Monetization Events</h1>\n      <Pointer />\n      <Log />\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}